version: 2
jobs:
  py3test:
    working_directory: ~/pymatgen
    docker:
      - image: materialsvirtuallab/circle-ci-pmg-py3:0.0.2
        environment:
          PMG_MAPI_ENDPOINT: https://zola.lbl.gov/rest/v2
    # parallelism: 4
    steps:
      - checkout
      - restore_cache: # restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-optional.txt" }}
      - run:
          command: |
            export PATH=$HOME/miniconda3/bin:$PATH
            if [ ! -d "/root/miniconda3/envs/test_env" ]; then conda create --quiet --yes --name test_env python=3.6; fi
            source activate test_env
            conda install --quiet --yes numpy scipy matplotlib sympy cython
            conda install --quiet --yes -c openbabel openbabel
            conda install --quiet --yes -c clinicalgraphics vtk
            conda install --quiet --yes cmake
            # conda update --quiet --all
            mkdir coverage_reports
            pip install --upgrade pip
            pip install --upgrade numpy
            pip install --quiet --ignore-installed -r requirements.txt -r requirements-optional.txt
            export CFLAGS=$CFLAGS" -std=gnu++11"
            pip install BoltzTraP2
            export CFLAGS=${CFLAGS%% -std=gnu++11}
            pip install --force-reinstall phonopy==1.11.12.121
            rm -r coverage_reports
      - save_cache: # special step to save dependency cache
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements-optional.txt" }}
          paths:
            - "/root/miniconda3/envs/test_env"
      - run:
          command: |
            # Add executables and path.
            for EXEPATH in `pwd`/cmd_line/*/Linux_64bit; do export PATH=$PATH:$EXEPATH; done
            export PATH=$HOME/miniconda3/bin:$PATH
            export GULP_LIB=`pwd`/cmd_line/gulp/Libraries
            export MPLBACKEND=Agg
            export LC_ALL=en_US.UTF-8
            export LANG=en_US.UTF-8
            # Only do matproj and other ext API tests once every five random runs or so.
            # The parallelism is 4. If 1/20 we have to run, that measn the probability of a matproj test running is 1-(1-0.05)**4 = 0.18.
            if [ "$(( RANDOM % 20 ))" -ne "0" ]; then export NOSE_EXCLUDE_TESTS="pymatgen.ext.tests.test_matproj.MPResterTest;pymatgen.analysis.tests.test_pourbaix_diagram.PourbaixDiagramTest;pymatgen.tests.test_init.SettingsTestCase"; fi
            export NOSE_EXCLUDE_TESTS="pymatgen.ext.tests.test_matproj.MPResterTest;pymatgen.analysis.tests.test_pourbaix_diagram.PourbaixDiagramTest;pymatgen.tests.test_init.SettingsTestCase"
            echo "NOSE_EXCLUDE_TESTS=$NOSE_EXCLUDE_TESTS"
            source activate test_env
            pip install --quiet -e .
            nosetests --config=nose.cfg --cover-html --cover-html-dir=coverage_reports --with-timer --timer-top-n 30
            # Command line tests
            pmg structure --convert --filenames test_files/Li2O.cif POSCAR.pmg
            pmg structure --convert --filenames POSCAR.pmg pmg.cif
            pmg analyze -d test_files
            if [ "$CI_PULL_REQUEST" == "" ]; then coveralls; fi
          no_output_timeout: 3600
      - store_artifacts:
          path: coverage_reports/
          destination: tr1
      - store_test_results:
          path: coverage_reports/

workflows:
  version: 2
  build_and_test:
    jobs:
      - py3test
