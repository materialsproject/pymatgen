# coding: utf-8
# Copyright (c) Pymatgen Development Team.
# Distributed under the terms of the MIT License.

from __future__ import division, print_function, unicode_literals, \
    absolute_import

import unittest
import os
import random
import json

import numpy as np
from ruamel.yaml import YAML
from pymatgen import Molecule, Element

from pymatgen.io.lammps.data import LammpsData, Topology, ForceField


test_dir = os.path.join(os.path.dirname(__file__), "..", "..", "..", "..",
                        "test_files", "lammps")


class LammpsDataTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.peptide = LammpsData.\
            from_file(filename=os.path.join(test_dir, "data.peptide"))
        cls.quartz = LammpsData.\
            from_file(filename=os.path.join(test_dir, "data.quartz"),
                      atom_style="atomic")
        mass_info = [("h", 1.007970), ("otip", 15.999400), ("htip", 1.007970)]
        pair_coeffs = [[0.0380000011, 2.4499714540],
                       [0.1520725945, 3.1506561105],
                       [0.0000000000, 0.0000000000]]
        mol_coeffs = {
            "Bond Coeffs":
                [{"coeffs": [398.7500, 0.7461], "types": [("h", "h")]},
                 {"coeffs": [540.6336, 0.9570], "types": [("otip", "htip")]}],
            "Angle Coeffs": [{"coeffs": [50.0000, 104.5200],
                              "types": [("htip", "otip", "htip")]}]
        }
        ff = ForceField(mass_info=mass_info, pair_coeffs=pair_coeffs,
                        mol_coeffs=mol_coeffs)
        h2 = Molecule(["H", "H"], [[4.6, 5.0, 2.5], [5.4, 5.0, 2.5]],
                      site_properties={"ff_map": ["h", "h"]})
        water = Molecule(["O", "H", "H"],
                         [[5.0, 5.0, 7.5], [4.0, 5.0, 7.5], [5.0, 4.0, 7.5]],
                         site_properties={"ff_map": ["otip"] + ["htip"] * 2,
                                          "charge": [-0.834, 0.417, 0.417]})
        topologies = [Topology.from_bonding(m, atom_type="ff_map")
                      for m in [h2, water]]
        cls.h2_water = LammpsData.\
            from_ff_and_topologies(ff=ff, topologies=topologies,
                                   box_bounds=[[0, 10]] * 3)
        cls.maxDiff = None

    def test_get_string(self):
        quartz_5 = r"""Generated by pymatgen.io.lammps.data.LammpsData

9 atoms

2 atom types

0.00000 4.91340 xlo xhi
0.00000 4.25513 ylo yhi
0.00000 5.40520 zlo zhi
-2.45670 0.00000 0.00000 xy xz yz

Masses

1  28.0855
2  15.9994



Atoms

1  1   2.30881   0.00000   3.60347
2  1  -1.15440   1.99948   1.80173
3  1  -1.15440  -1.99948   0.00000
4  2   1.37600   1.14080   4.24524
5  2  -1.67596   0.62125   7.84871
6  2   0.29996  -1.76205   6.04698
7  2   0.29996   1.76205  -4.24524
8  2  -1.67596  -0.62125  -0.64177
9  2   1.37600  -1.14080  -2.44351




"""
        self.assertEqual(self.quartz.get_string(significant_figures=5),
                         quartz_5)

        h2_water_3 = """Generated by pymatgen.io.lammps.data.LammpsData

5 atoms
3 bonds
1 angles

3 atom types
2 bond types
1 angle types

0.000 10.000 xlo xhi
0.000 10.000 ylo yhi
0.000 10.000 zlo zhi

Masses

1   1.0080
2  15.9994
3   1.0080

Pair Coeffs

1  0.0380000011   2.449971454
2  0.1520725945  3.1506561105
3           0.0           0.0

Bond Coeffs

1    398.75  0.7461
2  540.6336   0.957

Angle Coeffs

1  50.0  104.52

Atoms

1  1  1   0.000  4.600  5.000  2.500
2  1  1   0.000  5.400  5.000  2.500
3  2  2  -0.834  5.000  5.000  7.500
4  2  3   0.417  4.000  5.000  7.500
5  2  3   0.417  5.000  4.000  7.500



Bonds

1  1  1  2
2  2  3  4
3  2  3  5

Angles

1  1  4  3  5
"""
        self.assertEqual(self.h2_water.get_string(significant_figures=3),
                         h2_water_3)

    def test_write_file(self):
        self.h2_water.write_file("data.test")
        with open("data.test") as f:
            string_written = f.read()
        self.assertEqual(string_written, str(self.h2_water))

    def test_from_file(self):
        peptide = self.peptide
        # header stats and Nos. of columns
        self.assertEqual(peptide.masses.shape, (14, 1))
        self.assertEqual(peptide.atoms.shape, (2004, 9))
        self.assertListEqual(list(peptide.atoms.columns),
                             ["molecule-ID", "type", "q", "x", "y", "z",
                              "nx", "ny", "nz"])
        topo = peptide.topology
        self.assertEqual(topo["Bonds"].shape, (1365, 3))
        self.assertEqual(topo["Angles"].shape, (786, 4))
        self.assertEqual(topo["Dihedrals"].shape, (207, 5))
        self.assertEqual(topo["Impropers"].shape, (12, 5))
        ff = peptide.force_field
        self.assertEqual(ff["Pair Coeffs"].shape, (14, 4))
        self.assertEqual(ff["Bond Coeffs"].shape, (18, 2))
        self.assertEqual(ff["Angle Coeffs"].shape, (31, 4))
        self.assertEqual(ff["Dihedral Coeffs"].shape, (21, 4))
        self.assertEqual(ff["Improper Coeffs"].shape, (2, 2))
        # header box
        np.testing.assert_array_equal(peptide.box_bounds,
                                      [[36.840194, 64.211560],
                                       [41.013691, 68.385058],
                                       [29.768095, 57.139462]])
        # body
        self.assertEqual(peptide.masses.at[7, "mass"], 12.0110)
        self.assertEqual(ff["Pair Coeffs"].at[9, "coeff3"], 0.152100)
        self.assertEqual(ff["Bond Coeffs"].at[5, "coeff2"], 1.430000)
        self.assertEqual(ff["Angle Coeffs"].at[21, "coeff2"], 120.000000)
        self.assertEqual(ff["Dihedral Coeffs"].at[10, "coeff1"], 0.040000)
        self.assertEqual(ff["Improper Coeffs"].at[2, "coeff1"], 20.000000)
        self.assertEqual(peptide.atoms.at[29, "molecule-ID"], 1)
        self.assertEqual(peptide.atoms.at[29, "type"], 7)
        self.assertEqual(peptide.atoms.at[29, "q"], -0.020)
        self.assertAlmostEqual(peptide.atoms.at[29, "x"], 42.96709)
        self.assertEqual(peptide.atoms.at[1808, "molecule-ID"], 576)
        self.assertEqual(peptide.atoms.at[1808, "type"], 14)
        self.assertAlmostEqual(peptide.atoms.at[1808, "y"], 58.64352)
        self.assertEqual(peptide.atoms.at[1808, "nx"], -1)
        self.assertAlmostEqual(peptide.velocities.at[527, "vz"], -0.010889)
        self.assertEqual(topo["Bonds"].at[47, "type"], 8)
        self.assertEqual(topo["Bonds"].at[47, "atom2"], 54)
        self.assertEqual(topo["Bonds"].at[953, "atom1"], 1384)
        self.assertEqual(topo["Angles"].at[105, "type"], 19)
        self.assertEqual(topo["Angles"].at[105, "atom3"], 51)
        self.assertEqual(topo["Angles"].at[376, "atom2"], 772)
        self.assertEqual(topo["Dihedrals"].at[151, "type"], 14)
        self.assertEqual(topo["Dihedrals"].at[151, "atom4"], 51)
        self.assertEqual(topo["Impropers"].at[4, "atom4"], 32)
        # box_tilt and another atom_style
        quartz = self.quartz
        np.testing.assert_array_equal(quartz.box_tilt, [-2.456700, 0.0, 0.0])
        self.assertListEqual(list(quartz.atoms.columns),
                             ["type", "x", "y", "z"])
        self.assertAlmostEqual(quartz.atoms.at[7, "x"], 0.299963)
        # sort_id
        nvt = LammpsData.from_file(filename=os.path.join(test_dir,
                                                         "nvt.data"),
                                   sort_id=True)
        atom_id = random.randint(1, 648)
        self.assertEqual(nvt.atoms.loc[atom_id].name, atom_id)
        # PairIJ Coeffs section
        virus = LammpsData.from_file(filename=os.path.join(test_dir,
                                                           "virus.data"),
                                     atom_style="angle")
        n = len(virus.masses)
        pairij = virus.force_field["PairIJ Coeffs"]
        self.assertEqual(pairij.at[7, "id1"], 3)
        self.assertEqual(pairij.at[7, "id2"], 3)
        self.assertEqual(pairij.at[7, "coeff2"], 2.1)
        # class 2 and comments
        ethane = LammpsData.from_file(filename=os.path.join(test_dir,
                                                            "ethane.data"))
        self.assertEqual(ethane.masses.shape, (2, 1))
        self.assertEqual(ethane.atoms.shape, (8, 9))
        class2 = ethane.force_field
        self.assertEqual(class2["Pair Coeffs"].shape, (2, 2))
        self.assertEqual(class2["Bond Coeffs"].shape, (2, 4))
        self.assertEqual(class2["Angle Coeffs"].shape, (2, 4))
        self.assertEqual(class2["Dihedral Coeffs"].shape, (1, 6))
        self.assertEqual(class2["Improper Coeffs"].shape, (2, 2))
        self.assertEqual(class2["BondBond Coeffs"].at[2, "coeff3"], 1.1010)
        self.assertEqual(class2["BondAngle Coeffs"].at[2, "coeff4"], 1.1010)
        self.assertEqual(class2["AngleAngle Coeffs"].at[2, "coeff6"],
                         107.6600)
        self.assertEqual(class2["AngleAngle Coeffs"].at[2, "coeff6"],
                         107.6600)
        self.assertEqual(class2["AngleAngleTorsion Coeffs"].at[1, "coeff3"],
                         110.7700)
        self.assertEqual(class2["EndBondTorsion Coeffs"].at[1, "coeff8"],
                         1.1010)
        self.assertEqual(class2["MiddleBondTorsion Coeffs"].at[1, "coeff4"],
                         1.5300)
        self.assertEqual(class2["BondBond13 Coeffs"].at[1, "coeff3"], 1.1010)
        self.assertEqual(class2["AngleTorsion Coeffs"].at[1, "coeff8"],
                         110.7700)

    def test_from_ff_and_topologies(self):
        ff = ForceField.from_file(os.path.join(test_dir, "ff_peptide.yaml"))
        with open(os.path.join(test_dir, "topologies_peptide.json")) as f:
            topo_dicts = json.load(f)
        topologies = [Topology.from_dict(d) for d in topo_dicts]
        peptide = LammpsData.\
            from_ff_and_topologies(ff=ff, topologies=topologies,
                                   box_bounds=[[-50, 150]] * 3)
        self.assertListEqual(peptide.masses, ff.masses)
        force_field = ff.get_pair_coeffs()
        for kw in ff.mol_coeffs.keys():
            sec, _ = ff.get_coeffs_and_mapper(kw)
            force_field.update(sec)
        self.assertDictEqual(peptide.force_field, force_field)
        back_atom_map = {v: k for k, v in ff.atom_map.items()}
        # test the 1st topology, the peptide
        pep = topologies[0]
        # atoms and velocities sections
        i = random.randint(0, len(pep.sites) - 1)
        site = pep.sites[i]
        in_atoms = peptide.atoms[i]
        self.assertEqual(in_atoms["molecule-ID"], 1)
        self.assertEqual(in_atoms["id"], i + 1)
        self.assertEqual(in_atoms["type"],
                         ff.atom_map[site.properties["ff_map"]])
        self.assertEqual(in_atoms["q"], pep.charges[i])
        self.assertEqual(in_atoms["x"], site.x)
        self.assertEqual(in_atoms["y"], site.y)
        self.assertEqual(in_atoms["z"], site.z)
        in_velos = peptide.velocities[i]
        self.assertEqual(in_velos["id"], i + 1)
        self.assertListEqual(in_velos["velocity"], pep.velocities[i])
        # topology sections
        for t in ["Bond", "Angle", "Dihedral", "Improper"]:
            topo_sec = "%ss" % t
            ff_sec = "%s Coeffs" % t
            kw = t.lower()
            i = random.randint(0, len(pep.topologies[topo_sec]) - 1)
            sample = pep.topologies[topo_sec][i]
            in_topos = peptide.topology[topo_sec][i]
            self.assertEqual(in_topos["id"], i + 1, "%s" % t)
            np.testing.assert_array_equal(in_topos[kw],
                                          np.array(sample) + 1, "%s" % t)
            topo_type_id = in_topos["type"]
            types = ff.mol_coeffs[ff_sec][topo_type_id - 1]["types"]
            sample_type = tuple([pep.sites[j].properties["ff_map"]
                                 for j in sample])
            self.assertIn(sample_type, types, "%s" % t)
        # test a random solvent (water) molecule
        i = random.randint(1, len(topologies) - 1)
        solv = topologies[i]
        stack = {"Atoms": 0, "Bonds": 0, "Angles": 0}
        for topo in topologies[:i]:
            stack["Atoms"] += len(topo.sites)
            stack["Bonds"] += len(topo.topologies["Bonds"])
            stack["Angles"] += len(topo.topologies["Angles"])
        # atoms and velocities sections
        in_atoms = [d for d in peptide.atoms if d["molecule-ID"] == i + 1]
        self.assertEqual(len(in_atoms), len(solv.sites))
        aids, types, charges, coords = [], [], [], []
        for d in in_atoms:
            aids.append(d["id"])
            types.append(d["type"])
            charges.append(d["q"])
            coords.append([d["x"], d["y"], d["z"]])
        np.testing.assert_array_equal(aids, np.arange(len(solv.sites))
                                      + stack["Atoms"] + 1)
        self.assertListEqual(types, [ff.atom_map[t] for t in solv.types])
        self.assertListEqual(charges, solv.charges)
        np.testing.assert_array_equal(coords, solv.sites.cart_coords)
        in_velos = peptide.velocities[stack["Atoms"]: stack["Atoms"]
                                                      + len(in_atoms)]
        vids, velocities = [], []
        for d in in_velos:
            vids.append(d["id"])
            velocities.append(d["velocity"])
        self.assertListEqual(vids, aids)
        np.testing.assert_array_equal(velocities, solv.velocities)
        # topology sections
        for t in ["Bond", "Angle"]:
            topo_sec = "%ss" % t
            ff_sec = "%s Coeffs" % t
            kw = t.lower()
            sample = solv.topologies[topo_sec][0]
            i = stack[topo_sec]
            in_topos = peptide.topology[topo_sec][i]
            self.assertEqual(in_topos["id"], i + 1, "%s" % t)
            np.testing.assert_array_equal(in_topos[kw], np.array(sample)
                                          + stack["Atoms"] + 1, "%s" % t)
            topo_type_id = in_topos["type"]
            types = ff.mol_coeffs[ff_sec][topo_type_id - 1]["types"]
            sample_type = tuple([solv.sites[j].properties["ff_map"]
                                 for j in sample])
            self.assertIn(sample_type, types, "%s" % t)

    @classmethod
    def tearDownClass(cls):
        if os.path.exists("data.test"):
            os.remove("data.test")


class TopologyTest(unittest.TestCase):

    def test_init(self):
        inner_charge = np.random.rand(10) - 0.5
        outer_charge = np.random.rand(10) - 0.5
        inner_velo = np.random.rand(10, 3) - 0.5
        outer_velo = np.random.rand(10, 3) - 0.5
        m = Molecule(["H"] * 10, np.random.rand(10, 3) * 100,
                     site_properties={"ff_map": ["D"] * 10,
                                      "charge": inner_charge,
                                      "velocities": inner_velo})
        # q and v from site properties, while type from species_string
        topo = Topology(sites=m)
        self.assertListEqual(topo.types, ["H"] * 10)
        np.testing.assert_array_equal(topo.charges, inner_charge)
        np.testing.assert_array_equal(topo.velocities, inner_velo)
        # q and v from overriding, while type from site property
        topo_override = Topology(sites=m, atom_type="ff_map",
                                 charges=outer_charge,
                                 velocities=outer_velo)
        self.assertListEqual(topo_override.types, ["D"] * 10)
        np.testing.assert_array_equal(topo_override.charges, outer_charge)
        np.testing.assert_array_equal(topo_override.velocities, outer_velo)
        # test using a list of sites instead of SiteCollection
        topo_from_list = Topology(sites=m.sites)
        self.assertListEqual(topo_from_list.types, topo.types)
        np.testing.assert_array_equal(topo_from_list.charges, topo.charges)
        np.testing.assert_array_equal(topo_from_list.velocities,
                                      topo.velocities)

    def test_from_bonding(self):
        # He: no bonding topologies
        helium = Molecule(["He"], [[0, 0, 0]])
        topo_he = Topology.from_bonding(molecule=helium)
        self.assertIsNone(topo_he.topologies)
        # H2: 1 bond only
        hydrogen = Molecule(["H"] * 2, [[0, 0, 0], [0, 0, 0.7414]])
        topo_h = Topology.from_bonding(molecule=hydrogen)
        tp_h = topo_h.topologies
        self.assertListEqual(tp_h["Bonds"], [[0, 1]])
        self.assertNotIn("Angles", tp_h)
        self.assertNotIn("Dihedrals", tp_h)
        # water: 2 bonds and 1 angle only
        water = Molecule(["O", "H", "H"], [[0.0000, 0.0000, 0.1173],
                                           [0.0000, 0.7572, -0.4692],
                                           [0.0000, -0.7572, -0.4692]])
        topo_water = Topology.from_bonding(molecule=water)
        tp_water = topo_water.topologies
        self.assertListEqual(tp_water["Bonds"], [[0, 1], [0, 2]])
        self.assertListEqual(tp_water["Angles"], [[1, 0, 2]])
        self.assertNotIn("Dihedrals", tp_water)
        # EtOH
        etoh = Molecule(["C", "C", "O", "H", "H", "H", "H", "H", "H"],
                        [[1.1879, -0.3829, 0.0000],
                         [0.0000, 0.5526, 0.0000],
                         [-1.1867, -0.2472, 0.0000],
                         [-1.9237, 0.3850, 0.0000],
                         [2.0985, 0.2306, 0.0000],
                         [1.1184, -1.0093, 0.8869],
                         [1.1184, -1.0093, -0.8869],
                         [-0.0227, 1.1812, 0.8852],
                         [-0.0227, 1.1812, -0.8852]])
        topo_etoh = Topology.from_bonding(molecule=etoh)
        tp_etoh = topo_etoh.topologies
        self.assertEqual(len(tp_etoh["Bonds"]), 8)
        etoh_bonds = [[0, 1], [0, 4], [0, 5], [0, 6],
                      [1, 2], [1, 7], [1, 8], [2, 3]]
        np.testing.assert_array_equal(tp_etoh["Bonds"], etoh_bonds)
        self.assertEqual(len(tp_etoh["Angles"]), 13)
        etoh_angles = [[1, 0, 4], [1, 0, 5], [1, 0, 6], [4, 0, 5], [4, 0, 6],
                       [5, 0, 6], [0, 1, 2], [0, 1, 7], [0, 1, 8], [2, 1, 7],
                       [2, 1, 8], [7, 1, 8], [1, 2, 3]]
        np.testing.assert_array_equal(tp_etoh["Angles"], etoh_angles)
        self.assertEqual(len(tp_etoh["Dihedrals"]), 12)
        etoh_dihedrals = [[4, 0, 1, 2], [4, 0, 1, 7], [4, 0, 1, 8],
                          [5, 0, 1, 2], [5, 0, 1, 7], [5, 0, 1, 8],
                          [6, 0, 1, 2], [6, 0, 1, 7], [6, 0, 1, 8],
                          [0, 1, 2, 3], [7, 1, 2, 3], [8, 1, 2, 3]]
        np.testing.assert_array_equal(tp_etoh["Dihedrals"], etoh_dihedrals)
        # bond flag to off
        topo_etoh0 = Topology.from_bonding(molecule=etoh, bond=False,
                                           angle=True, dihedral=True)
        self.assertIsNone(topo_etoh0.topologies)
        # angle or dihedral flag to off
        topo_etoh1 = Topology.from_bonding(molecule=etoh, angle=False)
        self.assertNotIn("Angles", topo_etoh1.topologies)
        topo_etoh2 = Topology.from_bonding(molecule=etoh, dihedral=False)
        self.assertNotIn("Dihedrals", topo_etoh2.topologies)


class ForceFieldTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        mass_info = [("H", Element("H")), ("C", "C")]
        pair_coeffs = [[0.0380000011, 2.449971454],
                       [0.1479999981, 3.6170487995]]
        mol_coeffs = {
            "Bond Coeffs":
                [{"coeffs": [480.0, 1.34], "types": [("C", "C")]},
                 {"coeffs": [363.4164, 1.08], "types": [("H", "C")]}],
            "Angle Coeffs":
                [{"coeffs": [90.0, 120.0], "types": [("C", "C", "C")]},
                 {"coeffs": [37.0, 120.0], "types": [("H", "C", "C")]}],
            "Dihedral Coeffs":
                [{"coeffs": [3.0, -1, 2], "types": [("C", "C", "C", "C"),
                                                    ("H", "C", "C", "C"),
                                                    ("H", "C", "C", "H")]}],
            "Improper Coeffs": [{"coeffs": [0.37, -1, 2],
                                 "types": [("H", "C", "C", "C")]}]
        }
        cls.benzene = ForceField(mass_info=mass_info, pair_coeffs=pair_coeffs,
                                 mol_coeffs=mol_coeffs)
        cls.virus = ForceField.from_file(os.path.join(test_dir,
                                                      "ff_virus.yaml"))

    def test_init(self):
        b = self.benzene
        self.assertListEqual(b.mass_info, [("H", 1.00794), ("C", 12.0107)])
        self.assertDictEqual(b.atom_map, {"H": 1, "C": 2})
        self.assertListEqual(b.masses, [{"id": 1, "mass": 1.00794},
                                        {"id": 2, "mass": 12.0107}])
        self.assertEqual(b.pair_type, "pair")
        self.assertListEqual(b.mol_coeffs["Bond Coeffs"][1]["types"],
                             [("H", "C"), ("C", "H")])
        self.assertListEqual(b.mol_coeffs["Angle Coeffs"][1]["types"],
                             [("H", "C", "C"), ("C", "C", "H")])
        self.assertListEqual(b.mol_coeffs["Dihedral Coeffs"][0]["types"],
                             [("C", "C", "C", "C"), ("H", "C", "C", "C"),
                              ("H", "C", "C", "H"), ("C", "C", "C", "H")])
        self.assertListEqual(b.mol_coeffs["Improper Coeffs"][0]["types"],
                             [("H", "C", "C", "C"), ("C", "C", "C", "H")])
        v = self.virus
        self.assertDictEqual(v.atom_map, {"D": 1, "C": 2, "B": 3, "A": 4})
        self.assertEqual(v.pair_type, "pairij")

    def test_get_coeffs_and_mapper(self):
        b = self.benzene
        masses, atom_map = b.get_coeffs_and_mapper(section="Masses")
        self.assertListEqual(masses["Masses"], [{"id": 1, "mass": 1.00794},
                                                {"id": 2, "mass": 12.0107}])
        self.assertDictEqual(atom_map, b.atom_map)
        bond_sec = "Bond Coeffs"
        bonds, bond_map = b.get_coeffs_and_mapper(section=bond_sec)
        self.assertListEqual(bonds[bond_sec],
                             [{"id": 1, "coeffs": [480.0, 1.34]},
                              {"id": 2, "coeffs": [363.4164, 1.08]}])
        self.assertDictEqual(bond_map,
                             {("C", "C"): 1, ("H", "C"): 2, ("C", "H"): 2})
        angle_sec = "Angle Coeffs"
        angles, angle_map = b.get_coeffs_and_mapper(section=angle_sec)
        self.assertListEqual(angles[angle_sec],
                             [{"id": 1, "coeffs": [90.0, 120.0]},
                              {"id": 2, "coeffs": [37.0, 120.0]}])
        self.assertDictEqual(angle_map,
                             {("C", "C", "C"): 1, ("H", "C", "C"): 2,
                              ("C", "C", "H"): 2})
        dihedral_sec = "Dihedral Coeffs"
        dihedrals, \
        dihedral_map = b.get_coeffs_and_mapper(section=dihedral_sec)
        self.assertListEqual(dihedrals[dihedral_sec],
                             [{"id": 1, "coeffs": [3.0, -1, 2]}])
        self.assertDictEqual(dihedral_map,
                             {("C", "C", "C", "C"): 1,
                              ("H", "C", "C", "C"): 1,
                              ("H", "C", "C", "H"): 1,
                              ("C", "C", "C", "H"): 1})
        improper_sec = "Improper Coeffs"
        impropers, \
        improper_map = b.get_coeffs_and_mapper(section=improper_sec)
        self.assertListEqual(impropers[improper_sec],
                             [{"id": 1, "coeffs": [0.37, -1, 2]}])
        self.assertDictEqual(improper_map,
                             {("H", "C", "C", "C"): 1,
                              ("C", "C", "C", "H"): 1})
        v = self.virus
        vbonds, vbond_map = v.get_coeffs_and_mapper(section=bond_sec)
        self.assertListEqual(vbonds[bond_sec],
                             [{"id": 1, "coeffs": [50, 0.659469]},
                              {"id": 2, "coeffs": [50, 0.855906]}])
        self.assertDictEqual(vbond_map,
                             {("A", "B"): 1, ("C", "D"): 1, ("B", "A"): 1,
                              ("D", "C"): 1, ("B", "C"): 2, ("C", "B"): 2})

    def test_get_pair_coeffs(self):
        p_sec = "Pair Coeffs"
        pij_sec = "PairIJ Coeffs"
        b = self.benzene
        pairb = b.get_pair_coeffs()
        self.assertIn(p_sec, pairb)
        self.assertNotIn(pij_sec, pairb)
        pairb_data = [{"id": 1, "coeffs": [0.0380000011, 2.449971454]},
                      {"id": 2, "coeffs": [0.1479999981, 3.6170487995]}]
        self.assertListEqual(pairb[p_sec], pairb_data)
        v = self.virus
        pairv = v.get_pair_coeffs()
        self.assertIn(pij_sec, pairv)
        self.assertNotIn(p_sec, pairv)
        pairv_data = [{'id1': 1, 'id2': 1, 'coeffs': [1, 1, 1.1225]},
                      {'id1': 1, 'id2': 2, 'coeffs': [1, 1.55, 1.73988]},
                      {'id1': 1, 'id2': 3, 'coeffs': [1, 1.175, 1.31894]},
                      {'id1': 1, 'id2': 4, 'coeffs': [1, 1, 1.1225]},
                      {'id1': 2, 'id2': 2, 'coeffs': [1, 2.1, 4]},
                      {'id1': 2, 'id2': 3, 'coeffs': [1, 1.725, 1.93631]},
                      {'id1': 2, 'id2': 4, 'coeffs': [1, 1.55, 1.73988]},
                      {'id1': 3, 'id2': 3, 'coeffs': [1, 1.35, 4]},
                      {'id1': 3, 'id2': 4, 'coeffs': [1, 1.175, 1.31894]},
                      {'id1': 4, 'id2': 4, 'coeffs': [1, 1, 1.1225]}]
        self.assertListEqual(pairv[pij_sec], pairv_data)

    def test_to_file(self):
        filename = "ff_test.yaml"
        b = self.benzene
        b.to_file(filename=filename)
        yaml = YAML(typ="safe")
        with open(filename, "r") as f:
            d = yaml.load(f)
        self.assertListEqual(d["mass_info"], [list(m) for m in b.mass_info])
        self.assertListEqual(d["pair_coeffs"], b.pair_coeffs)

    def test_from_file(self):
        v = self.virus
        self.assertListEqual(v.mass_info, [("D", 1.0), ("C", 2.744),
                                           ("B", 1.728), ("A", 1.0)])
        self.assertListEqual(v.pair_coeffs,
                             [[1, 1, 1.1225], [1, 1.55, 1.73988],
                              [1, 1.175, 1.31894], [1, 1, 1.1225],
                              [1, 2.1, 4], [1, 1.725, 1.93631],
                              [1, 1.55, 1.73988], [1, 1.35, 4],
                              [1, 1.175, 1.31894], [1, 1, 1.1225]])
        self.assertListEqual(v.mol_coeffs["Bond Coeffs"],
                             [{"coeffs": [50, 0.659469],
                               "types": [("A", "B"), ("C", "D"),
                                         ("B", "A"), ("D", "C")]},
                              {"coeffs": [50, 0.855906],
                               "types": [("B", "C"), ("C", "B")]}])

    def test_from_dict(self):
        d = self.benzene.as_dict()
        json_str = json.dumps(d)
        decoded = ForceField.from_dict(json.loads(json_str))
        self.assertListEqual(decoded.mass_info, self.benzene.mass_info)
        self.assertListEqual(decoded.pair_coeffs, self.benzene.pair_coeffs)
        self.assertDictEqual(decoded.mol_coeffs, self.benzene.mol_coeffs)

    @classmethod
    def tearDownClass(cls):
        if os.path.exists("ff_test.yaml"):
            os.remove("ff_test.yaml")


if __name__ == "__main__":
    unittest.main()
