# coding: utf-8
# Copyright (c) Pymatgen Development Team.
# Distributed under the terms of the MIT License.

from __future__ import division, print_function, unicode_literals, \
    absolute_import

import os
import unittest
import random
from collections import OrderedDict

import numpy as np

from pymatgen.io.lammps.data import LammpsData, parse_data_file
from pymatgen import Molecule, Structure, Lattice
from pymatgen.util.testing import PymatgenTest

from pymatgen.io.lammps.data import LammpsForceFieldData
from pymatgen.io.lammps.force_field import ForceField
from pymatgen.io.lammps.topology import Topology


__author__ = 'Kiran Mathew'
__email__ = 'kmathew@lbl.gov'

test_dir = os.path.join(os.path.dirname(__file__), "..", "..", "..", "..",
                        "test_files", "lammps")


class LammpsDataTest(PymatgenTest):

    @classmethod
    def setUpClass(cls):
        cls.struc = cls.get_structure("TiO2")
        cls.molec = Molecule(["C", "O", "N", "N", "H", "H", "H", "H"],
                             [[0.0000, 0.0000, 0.1360],
                              [0.0000, 0.0000, 1.3571],
                              [-0.1024, 1.1558, -0.6072],
                              [0.1024, -1.1558, -0.6072],
                              [0.0000, 1.9999, -0.0416],
                              [0.2399, 1.1640, -1.5444],
                              [0.0000, -1.9999, -0.0416],
                              [-0.2399, -1.1640, -1.5444]])
        cls.ld = LammpsData.from_structure(cls.molec, box_bounds=None,
                                           translate_mol=True,
                                           atom_style="full")

    def test_get_string(self):
        expected = """Generated by pymatgen.io.lammps.data.LammpsData

8 atoms

4 atom types

0.0000 10.0000 xlo xhi
0.0000 10.0000 ylo yhi
0.0000 10.0000 zlo zhi

Masses 

1  1.00794
2  12.0107
3  14.0067
4  15.9994

Atoms 

1  1  2  0.0000  5.0000  5.0000  5.0837
2  1  4  0.0000  5.0000  5.0000  6.3048
3  1  3  0.0000  4.8976  6.1558  4.3405
4  1  3  0.0000  5.1024  3.8442  4.3405
5  1  1  0.0000  5.0000  6.9999  4.9061
6  1  1  0.0000  5.2399  6.1640  3.4033
7  1  1  0.0000  5.0000  3.0001  4.9061
8  1  1  0.0000  4.7601  3.8360  3.4033
"""
        self.assertEqual(self.ld.get_string(significant_figures=4), expected)

    def test_write_file(self):
        self.ld.write_file("data.test")
        ldr = LammpsData.from_file("data.test", atom_style="full")
        self.assertListEqual(self.ld.box_bounds, ldr.box_bounds)
        self.assertListEqual(self.ld.masses, ldr.masses)
        ind = random.randint(0, 7)
        for k in ["id", "molecule-ID", "type"]:
            self.assertEqual(self.ld.atoms[ind][k], ldr.atoms[ind][k])
        for k in "qxyz":
            self.assertAlmostEqual(self.ld.atoms[ind][k],
                                   ldr.atoms[ind][k], 6)
        os.remove("data.test")

    def test_structure(self):
        arg_latt = self.struc.lattice
        ld = LammpsData.from_structure(self.struc, atom_style="charge")
        attr = ld.structure
        attr_latt = attr.lattice
        np.testing.assert_array_almost_equal(arg_latt.abc, attr_latt.abc)
        np.testing.assert_array_almost_equal(arg_latt.angles,
                                             attr_latt.angles)
        # test if certain componenets are 0s as required by LAMMPS for
        # any tilted box
        np.testing.assert_array_equal(attr_latt.matrix[(0, 0, 1), (1, 2, 2)],
                                      np.zeros(3))
        self.assertListEqual(self.struc.species, attr.species)
        np.testing.assert_array_almost_equal(self.struc.frac_coords,
                                             attr.frac_coords)
        self.assertIn("charge", attr[0].properties)
        ld0 = LammpsData.from_structure(self.struc, atom_style="atomic")
        self.assertNotIn("charge", ld0.structure[0].properties)

    def test_get_element_map(self):
        element_map = LammpsData.get_element_map(structure=self.molec)
        self.assertDictEqual(element_map, {"C": 2, "O": 4, "N": 3, "H": 1})

    def test_get_atoms_data(self):
        element_map = {"C": 1, "O": 2, "N": 3, "H": 4}
        atoms = LammpsData.get_atoms_data(structure=self.molec,
                                          element_map=element_map)
        ind = random.randint(0, 7)
        site = self.molec[ind]
        sample = atoms[ind]
        self.assertEqual(sample["molecule-ID"], 1)
        self.assertEqual(sample["id"], ind + 1)
        self.assertEqual(sample["type"], element_map[site.specie.symbol])
        self.assertEqual(sample["q"], 0.0)
        np.testing.assert_array_equal([sample[k] for k in "xyz"], site.coords)
        atoms0 = LammpsData.get_atoms_data(structure=self.molec,
                                           element_map=element_map,
                                           atom_style="molecular")
        self.assertNotIn("q", atoms0[0])

    def test_from_structure(self):
        com = self.molec.center_of_mass
        get_coords = lambda ld: [[a[k] for k in "xyz"] for a in ld.atoms]
        self.assertIsNone(self.ld.box_tilt)
        mass_list = [1.00794, 12.0107, 14.0067, 15.9994]
        masses = [{"id": i + 1, "mass": m} for i, m in enumerate(mass_list)]
        self.assertListEqual(self.ld.masses, masses)
        shifted_coords = get_coords(self.ld)
        np.testing.assert_array_equal(self.molec.cart_coords - com +
                                      np.array([5] * 3), shifted_coords)
        no_trans = LammpsData.from_structure(structure=self.molec,
                                             box_bounds=None,
                                             translate_mol=False)
        unshifted_coords = get_coords(no_trans)
        np.testing.assert_array_equal(self.molec.cart_coords,
                                      unshifted_coords)
        tiny_box = [[0, 0.4]] * 3
        adjusted = LammpsData.from_structure(structure=self.molec,
                                             box_bounds=tiny_box,
                                             translate_mol=False)
        adjusted_coords = get_coords(adjusted)
        box_center = np.mean(adjusted.box_bounds, axis=1)
        np.testing.assert_array_equal(self.molec.cart_coords - com +
                                      box_center, adjusted_coords)
        crystal = LammpsData.from_structure(structure=self.struc,
                                            atom_style="atomic")
        ax, by, cz = [b[1] for b in crystal.box_bounds]
        bx, cx, cy = crystal.box_tilt
        self.assertAlmostEqual(self.struc.lattice.a, ax)
        self.assertAlmostEqual(self.struc.lattice.b, np.linalg.norm([bx, by]))
        self.assertAlmostEqual(self.struc.lattice.c,
                               np.linalg.norm([cx, cy, cz]))
        latt = Lattice([[ax, 0, 0], [bx, by, 0], [cx, cy, cz]])
        dummy_crystal = Structure(lattice=latt,
                                  species=["H"] * len(self.struc),
                                  coords=get_coords(crystal),
                                  coords_are_cartesian=True)
        np.testing.assert_array_almost_equal(self.struc.frac_coords,
                                             dummy_crystal.frac_coords)

    def test_from_file(self):
        file_path = os.path.join(test_dir, "data.quartz")
        ld = LammpsData.from_file(data_file=file_path, atom_style="atomic")
        np.testing.assert_array_equal(ld.box_bounds, [[0, 4.913400],
                                                      [0, 4.255129],
                                                      [0, 5.405200]])
        np.testing.assert_array_equal(ld.box_tilt, [-2.456700, 0.0, 0.0])
        masses = [{"id": i + 1, "mass": m} for
                  i, m in enumerate([28.0855, 15.9994])]
        self.assertListEqual(ld.masses, masses)
        self.assertDictEqual(ld.atoms[-1], {"id": 9, "type": 2, "x": 1.375998,
                                            "y": -1.140800, "z": -2.443511})


class TestLammpsForceFieldData(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        polymer_chain = Molecule.from_file(os.path.join(test_dir, "polymer_chain.xyz"))
        polymer_linear = Molecule.from_file(os.path.join(test_dir, "polymer_linear.xyz"))
        cls.polymer_matrix = Molecule.from_file(os.path.join(test_dir, "polymer_matrix.xyz"))

        charges = [-0.1187, 0.0861, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.0326, 0.0861,
                   0.0861, -0.0326, 0.0861, 0.0861, -0.2792, -0.1187, 0.0861,
                   0.0861, 0.0861]
        polymer_linear.add_site_property("charge", charges)
        topology = Topology.from_molecule(polymer_linear)

        cls.polymer_linear_ff_decorated = Molecule.from_file(
            os.path.join(test_dir, "polymer_linear.xyz"))
        ff_map = ['C2', 'H3', 'H2', 'H3', 'O', 'C3', 'H2', 'H3', 'C2', 'H3',
                  'H2', 'O', 'C2', 'H3', 'H2', 'C3', 'H2', 'H3', 'O', 'C3',
                  'H2', 'H3', 'C2', 'H3', 'H2', 'O', 'C2', 'H3', 'H2', 'C3',
                  'H2', 'H3', 'O', 'C3', 'H2', 'H3', 'C2', 'H3', 'H2', 'O',
                  'C2', 'H3', 'H2', 'C3', 'H2', 'H3', 'O', 'C3', 'H2', 'H3', 'H2']
        cls.polymer_linear_ff_decorated.add_site_property("ff_map", ff_map)

        atoms = OrderedDict([("C", "C"), ("H", "H"), ("O", "O")])
        bonds = OrderedDict([((u'C', u'O'), [1000, 1.4115]),
                             ((u'C', u'H'), [1000, 1.1041]),
                             ((u'C', u'C'), [1000, 1.5075])])
        pairs = OrderedDict([((u'O', u'O'), [75844.8, 0.2461, 396.9]),
                             ((u'H', u'H'), [2649.6, 0.2674, 27.22]),
                             ((u'C', u'C'), [14976.0, 0.3236, 637.6])])
        angles = OrderedDict([((u'C', u'C', u'H'), [42.9, 110.1]),
                              ((u'H', u'C', u'H'), [38.5, 109.47]),
                              ((u'H', u'C', u'O'), [56.0, 109.48]),
                              ((u'C', u'C', u'O'), [86.0, 108.54]),
                              ((u'C', u'O', u'C'), [74.5, 108.05])])
        dihedrals = OrderedDict([((u'H', u'C', u'O', u'C'), [0.0, 0.0, -0.73, 0.0]),
                                 ((u'H', u'C', u'C', u'H'), [0.0, 0.0, 0.28, 0.0]),
                                 ((u'C', u'C', u'O', u'C'), [1.76, 0.67, 0.04, 0.0]),
                                 ((u'H', u'C', u'C', u'O'), [0.0, 0.0, 0.28, 0.0]),
                                 ((u'O', u'C', u'C', u'O'), [0.41, -2.1, -0.6, -0.82])])
        forcefield = ForceField(atoms, bonds, angles, dihedrals=dihedrals, pairs=pairs)

        cls.molecules = [polymer_chain] * 3
        cls.mols_number = [7, 3, 1]
        box_size = [[0.0, 50], [0.0, 50], [0.0, 50]]
        cls.topologies = [topology] * len(cls.molecules)

        cls.lammps_ff_data_1 = LammpsForceFieldData.from_forcefield_and_topology(
            cls.molecules, cls.mols_number, box_size, cls.polymer_matrix,
            forcefield, cls.topologies)

    def test_system_info(self):
        # check te molecule ids
        mol_ids = np.array(self.lammps_ff_data_1.atoms_data)[:, 1]
        mol_ids_ans = [i + 1 for i in range(sum(self.mols_number))]
        self.assertEqual(set(mol_ids.tolist()), set(mol_ids_ans))
        # check the size consistency of the polymer matrix
        self.assertEqual(len(self.polymer_matrix),
                         sum([len(mol) * self.mols_number[i]
                              for i, mol in enumerate(self.molecules)]))
        for top in self.topologies:
            self.assertEqual(len(self.lammps_ff_data_1.atoms_data),
                             sum([len(top.atoms) * mol_number
                                  for mol_number in self.mols_number]))
            self.assertEqual(len(self.lammps_ff_data_1.bonds_data),
                             sum([len(top.bonds) * mol_number
                                  for mol_number in self.mols_number]))
            self.assertEqual(len(self.lammps_ff_data_1.angles_data),
                             sum([len(top.angles) * mol_number
                                  for mol_number in self.mols_number]))
            self.assertEqual(len(self.lammps_ff_data_1.dihedrals_data),
                             sum([len(top.dihedrals) * mol_number
                                  for mol_number in self.mols_number]))

    def test_system_info_with_ff_map(self):
        natoms, natom_types, atomic_masses_dict = \
            LammpsForceFieldData.get_basic_system_info(self.polymer_linear_ff_decorated)

        ans_atom_masses_dict = OrderedDict([('H2', [1, 1.00794]),
                                            ('H3', [2, 1.00794]),
                                            ('C2', [3, 12.0107]),
                                            ('C3', [4, 12.0107]),
                                            ('O', [5, 15.9994])])

        self.assertEqual(natoms, 51)
        self.assertEqual(natom_types, 5)
        self.assertEqual(atomic_masses_dict.keys(), ans_atom_masses_dict.keys())
        for k, v in atomic_masses_dict.items():
            self.assertEqual(ans_atom_masses_dict[k][1], v[1])

    def test_atoms_data_with_ff_map(self):
        natoms, natom_types, atomic_masses_dict = \
            LammpsForceFieldData.get_basic_system_info(self.polymer_linear_ff_decorated)
        topology = Topology.from_molecule(self.polymer_linear_ff_decorated,
                                          ff_map="ff_map")
        atoms_data, molid_to_atomid = LammpsForceFieldData.get_atoms_data(
            [self.polymer_linear_ff_decorated], [1],
            self.polymer_linear_ff_decorated, atomic_masses_dict,
            [topology])

        for i, atom in enumerate(atoms_data):
            key = self.polymer_linear_ff_decorated[i].ff_map
            self.assertEqual(atom[2], atomic_masses_dict[key][0])

    def test_to_and_from_file(self):
        self.lammps_ff_data_1.write_file(
            os.path.join(test_dir, "lammps_ff_data.dat"))
        lammps_ff_data_2 = LammpsForceFieldData.from_file(
            os.path.join(test_dir, "lammps_ff_data.dat"))
        np.testing.assert_almost_equal(self.lammps_ff_data_1.bond_coeffs,
                                       lammps_ff_data_2.bond_coeffs)
        np.testing.assert_almost_equal(self.lammps_ff_data_1.pair_coeffs,
                                       lammps_ff_data_2.pair_coeffs)
        np.testing.assert_almost_equal(self.lammps_ff_data_1.angle_coeffs,
                                       lammps_ff_data_2.angle_coeffs)
        np.testing.assert_almost_equal(self.lammps_ff_data_1.dihedral_coeffs,
                                       lammps_ff_data_2.dihedral_coeffs)
        np.testing.assert_almost_equal(self.lammps_ff_data_1.atoms_data,
                                       lammps_ff_data_2.atoms_data, decimal=10)
        self.assertEqual(self.lammps_ff_data_1.bonds_data,
                         lammps_ff_data_2.bonds_data)
        self.assertEqual(self.lammps_ff_data_1.angles_data,
                         lammps_ff_data_2.angles_data)
        self.assertEqual(self.lammps_ff_data_1.dihedrals_data,
                         lammps_ff_data_2.dihedrals_data)

    def tearDown(self):
        for x in ["lammps_ff_data.dat"]:
            if os.path.exists(os.path.join(test_dir, x)):
                os.remove(os.path.join(test_dir, x))


class FuncTest(unittest.TestCase):

    def test_parse_data_file(self):
        # peptide: test main features
        peptide = parse_data_file(filename=os.path.join(test_dir,
                                                        "data.peptide"))
        # header
        counts = peptide["header"]["counts"]
        self.assertEqual(counts["atoms"], 2004)
        self.assertEqual(counts["bonds"], 1365)
        self.assertEqual(counts["angles"], 786)
        self.assertEqual(counts["dihedrals"], 207)
        self.assertEqual(counts["impropers"], 12)
        types = peptide["header"]["types"]
        self.assertEqual(types["atom"], 14)
        self.assertEqual(types["bond"], 18)
        self.assertEqual(types["angle"], 31)
        self.assertEqual(types["dihedral"], 21)
        self.assertEqual(types["improper"], 2)
        bounds = peptide["header"]["bounds"]
        np.testing.assert_array_equal(bounds, [[36.840194, 64.211560],
                                               [41.013691, 68.385058],
                                               [29.768095, 57.139462]])
        # body: test data in the last line of each section
        masses = peptide["body"]["Masses"]
        self.assertDictEqual(masses[-1], {"id": 14, "mass": 1.0100})
        pair_coeffs = peptide["body"]["Pair Coeffs"]
        self.assertDictEqual(pair_coeffs[-1], {"id": 14,
                                               "coeffs": [0.046000,
                                                          0.400014,
                                                          0.046000,
                                                          0.400014]})
        bond_coeffs = peptide["body"]["Bond Coeffs"]
        self.assertDictEqual(bond_coeffs[-1], {"id": 18,
                                               "coeffs": [450.000000,
                                                          0.957200]})
        angle_coeffs = peptide["body"]["Angle Coeffs"]
        self.assertDictEqual(angle_coeffs[-1], {"id": 31,
                                                "coeffs": [55.000000,
                                                           104.520000,
                                                           0.000000,
                                                           0.000000]})
        dihedral_coeffs = peptide["body"]["Dihedral Coeffs"]
        self.assertDictEqual(dihedral_coeffs[-1], {"id": 21,
                                                   "coeffs": [0.010000,
                                                              3, 0,
                                                              1.000000]})
        improper_coeffs = peptide["body"]["Improper Coeffs"]
        self.assertDictEqual(improper_coeffs[-1], {"id": 2,
                                                   "coeffs": [20.000000,
                                                              0.000000]})
        atom = peptide["body"]["Atoms"][-1]
        self.assertDictEqual(atom, {"id": 2004, "molecule-ID": 641,
                                    "type": 14, "q": 0.417, "x": 56.55074,
                                    "y": 49.75049, "z": 48.61854, "nx": 1,
                                    "ny": 1, "nz": 1})
        velocity = peptide["body"]["Velocities"][-1]
        self.assertDictEqual(velocity, {"id": 2004,
                                        "velocity": [-0.010076,
                                                     -0.005729,
                                                     -0.026032]})
        bond = peptide["body"]["Bonds"][-1]
        self.assertDictEqual(bond, {"id": 1365, "type": 18,
                                    "bond": [2002, 2003]})
        for i in bond["bond"]:
            self.assertIsInstance(i, int)
        angle = peptide["body"]["Angles"][-1]
        self.assertDictEqual(angle, {"id": 786, "type": 31,
                                     "angle": [2003, 2002, 2004]})
        for i in angle["angle"]:
            self.assertIsInstance(i, int)
        dihedral = peptide["body"]["Dihedrals"][-1]
        self.assertDictEqual(dihedral, {"id": 207, "type": 3,
                                        "dihedral": [64, 79, 80, 82]})
        for i in dihedral["dihedral"]:
            self.assertIsInstance(i, int)
        improper = peptide["body"]["Impropers"][-1]
        self.assertDictEqual(improper, {"id": 12, "type": 2,
                                        "improper": [79, 64, 80, 81]})
        for i in improper["improper"]:
            self.assertIsInstance(i, int)
        # quartz: test box tilt and other atom style
        quartz = parse_data_file(filename=os.path.join(test_dir,
                                                       "data.quartz"),
                                 atom_style="atomic")
        tilt = quartz["header"]["tilt"]
        np.testing.assert_array_equal(tilt, [-2.456700, 0.0, 0.0])
        atom_data = quartz["body"]["Atoms"][-1]
        self.assertDictEqual(atom_data, {"id": 9, "type": 2, "x": 1.375998,
                                         "y": -1.140800, "z": -2.443511})
        # nvt: test ID sorting feature
        nvt = parse_data_file(filename=os.path.join(test_dir, "nvt.data"),
                              sort_id=True)
        atom_id = random.randint(1, 648)
        self.assertEqual(atom_id, nvt["body"]["Atoms"][atom_id - 1]["id"])


if __name__ == "__main__":
    unittest.main()
