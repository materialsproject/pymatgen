# coding: utf-8
# Copyright (c) Pymatgen Development Team.
# Distributed under the terms of the MIT License.

from __future__ import unicode_literals

import unittest

import os

from pymatgen import Structure
from pymatgen.io.feff.sets import MPXANESSet, MPELNESSet
from pymatgen.io.feff.inputs import Potential
from pymatgen.io.cif import CifParser

test_dir = os.path.join(os.path.dirname(__file__), "..", "..", "..", "..",
                        'test_files')


class FeffInputSetTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls):

        cls.header_string = """* This FEFF.inp file generated by pymatgen
TITLE comment: From cif file
TITLE Source:  CoO19128.cif
TITLE Structure Summary:  Co2 O2
TITLE Reduced formula:  CoO
TITLE space group: (P6_3mc), space number:  (186)
TITLE abc:  3.297078   3.297078   5.254213
TITLE angles: 90.000000  90.000000 120.000000
TITLE sites: 4
* 1 Co     0.666667     0.333333     0.003676
* 2 Co     0.333334     0.666666     0.503676
* 3 O     0.333334     0.666666     0.121324
* 4 O     0.666667     0.333333     0.621325"""
        cif_file = os.path.join(test_dir, 'CoO19128.cif')
        cls.structure = CifParser(cif_file).get_structures()[0]
        cls.absorbing_atom = 'O'
        cls.mp_xanes = MPXANESSet(cls.absorbing_atom, cls.structure)

    def test_get_header(self):
        comment = 'From cif file'
        header = str(self.mp_xanes.header(source='CoO19128.cif', comment=comment))
        ref = self.header_string.splitlines()
        last4 = [" ".join(l.split()[2:]) for l in ref[-4:]]
        for i, l in enumerate(header.splitlines()):
            if i < 9:
                self.assertEqual(l, ref[i])
            else:
                s = " ".join(l.split()[2:])
                self.assertIn(s, last4)

    def test_getfefftags(self):
        tags = self.mp_xanes.tags.as_dict()
        self.assertEqual(tags['COREHOLE'], "FSR",
                         "Failed to generate PARAMETERS string")

    def test_get_feffPot(self):
        POT = str(self.mp_xanes.potential)
        d, dr = Potential.pot_dict_from_string(POT)
        self.assertEqual(d['Co'], 1, "Wrong symbols read in for Potential")

    def test_get_feff_atoms(self):
        atoms = str(self.mp_xanes.atoms)
        self.assertEqual(atoms.splitlines()[3].split()[4], self.absorbing_atom,
                         "failed to create ATOMS string")

    def test_to_and_from_dict(self):
        f1_dict = self.mp_xanes.as_dict()
        f2 = MPXANESSet.from_dict(f1_dict)
        self.assertEqual(f1_dict, f2.as_dict())

    def test_user_tag_settings(self):
        tags_dict_ans = self.mp_xanes.tags.as_dict()
        tags_dict_ans["COREHOLE"] = "RPA"
        tags_dict_ans["EDGE"] = "L1"
        user_tag_settings = {"COREHOLE": "RPA", "EDGE": "L1"}
        mp_xanes_2 = MPXANESSet(self.absorbing_atom, self.structure,
                                user_tag_settings=user_tag_settings)
        self.assertEqual(mp_xanes_2.tags.as_dict(), tags_dict_ans)

    def test_eels_to_from_dict(self):
        elnes = MPELNESSet(self.absorbing_atom, self.structure, radius=5.0,
                           beam_energy=100, beam_direction=[1, 0, 0],
                           collection_angle=7, convergence_angle=6)
        elnes_dict = elnes.as_dict()
        elnes_2 = MPELNESSet.from_dict(elnes_dict)
        self.assertEqual(elnes_dict, elnes_2.as_dict())

    def test_eels_tags_set(self):
        radius = 5.0
        user_eels_settings = {
            'ENERGY': '4 0.04 0.1',
            'BEAM_ENERGY': '200 1 0 1',
            'ANGLES': '2 3'}
        elnes = MPELNESSet(self.absorbing_atom, self.structure, radius=radius,
                           user_eels_settings=user_eels_settings)
        elnes_2 = MPELNESSet(self.absorbing_atom, self.structure, radius=radius,
                             beam_energy=100, beam_direction=[1, 0, 0],
                             collection_angle=7, convergence_angle=6)
        self.assertEqual(elnes.tags["ELNES"]["ENERGY"],
                         user_eels_settings["ENERGY"])
        self.assertEqual(elnes.tags["ELNES"]["BEAM_ENERGY"],
                         user_eels_settings["BEAM_ENERGY"])
        self.assertEqual(elnes.tags["ELNES"]["ANGLES"],
                         user_eels_settings["ANGLES"])
        self.assertEqual(elnes_2.tags["ELNES"]["BEAM_ENERGY"], [100, 0, 1, 1])
        self.assertEqual(elnes_2.tags["ELNES"]["BEAM_DIRECTION"], [1, 0, 0])
        self.assertEqual(elnes_2.tags["ELNES"]["ANGLES"], [7, 6])

    def test_reciprocal_tags_and_input(self):
        user_tag_settings = {"RECIPROCAL": "", "KMESH": "1000"}
        elnes = MPELNESSet(self.absorbing_atom, self.structure,
                           user_tag_settings=user_tag_settings)
        self.assertTrue("RECIPROCAL" in elnes.tags)
        self.assertEqual(elnes.tags["TARGET"], 3)
        self.assertEqual(elnes.tags["KMESH"], "1000")
        self.assertEqual(elnes.tags["CIF"], "Co2O2.cif")
        self.assertEqual(elnes.tags["COREHOLE"], "RPA")
        all_input = elnes.all_input()
        self.assertNotIn("ATOMS", all_input)
        self.assertNotIn("POTENTIALS", all_input)
        elnes.write_input()
        structure = Structure.from_file("Co2O2.cif")
        self.assertTrue(self.structure.matches(structure))
        os.remove("HEADER")
        os.remove("PARAMETERS")
        os.remove("feff.inp")
        os.remove("Co2O2.cif")

    def test_number_of_kpoints(self):
        user_tag_settings = {"RECIPROCAL": ""}
        elnes = MPELNESSet(self.absorbing_atom, self.structure, nkpts=1000,
                           user_tag_settings=user_tag_settings)
        self.assertEqual(elnes.tags["KMESH"], [12, 12, 7])

    def test_large_systems(self):
        struct = Structure.from_file(os.path.join(test_dir, "La4Fe4O12.cif"))
        user_tag_settings = {"RECIPROCAL": "", "KMESH": "1000"}
        elnes = MPELNESSet("Fe", struct, user_tag_settings=user_tag_settings)
        self.assertNotIn("RECIPROCAL", elnes.tags)
        self.assertNotIn("KMESH", elnes.tags)
        self.assertNotIn("CIF", elnes.tags)
        self.assertNotIn("TARGET", elnes.tags)


if __name__ == '__main__':
    unittest.main()
