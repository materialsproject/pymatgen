"""Helper functions for testing AIMS IO."""

from __future__ import annotations

import gzip
import json
from glob import glob
from pathlib import Path
from typing import TYPE_CHECKING

import numpy as np
from monty.io import zopen

from pymatgen.core import Molecule, Structure

if TYPE_CHECKING:
    from pymatgen.io.aims.sets.base import AimsInputGenerator


def check_band(test_line: str, ref_line: str) -> bool:
    """Check if band lines are the same."""
    test_pts = [float(inp) for inp in test_line.split()[-9:-2]]
    ref_pts = [float(inp) for inp in ref_line.split()[-9:-2]]

    return np.allclose(test_pts, ref_pts) and test_line.split()[-2:] == ref_line.split()[-2:]


def compare_files(test_name: str, work_dir: Path, ref_dir: Path) -> None:
    """Compare files generated by tests with ones in reference directories."""
    for file in glob(f"{work_dir / test_name}/*in"):
        with open(file) as test_file:
            test_lines = [line.strip() for line in test_file.readlines() if len(line.strip()) > 0 and line[0] != "#"]

        with gzip.open(f"{ref_dir / test_name / Path(file).name}.gz", "rt") as ref_file:
            ref_lines = [line.strip() for line in ref_file.readlines() if len(line.strip()) > 0 and line[0] != "#"]

        for test_line, ref_line in zip(test_lines, ref_lines):
            if "output" in test_line and "band" in test_line:
                assert check_band(test_line, ref_line)
            else:
                assert test_line == ref_line

    with open(f"{ref_dir / test_name}/parameters.json") as ref_file:
        ref = json.load(ref_file)
    ref.pop("species_dir", None)
    ref_output = ref.pop("output", None)

    with open(f"{work_dir / test_name}/parameters.json") as check_file:
        check = json.load(check_file)

    check.pop("species_dir", None)
    check_output = check.pop("output", None)

    assert ref == check

    if check_output:
        for ref_out, check_out in zip(ref_output, check_output):
            if "band" in check_out:
                assert check_band(check_out, ref_out)
            else:
                assert ref_out == check_out


def comp_system(
    atoms: Structure,
    user_params: dict,
    test_name: str,
    work_dir: Path,
    ref_dir: Path,
    generator_cls: AimsInputGenerator,
) -> None:
    """Compare files generated by tests with ones in reference directories."""
    k_point_density = user_params.pop("k_point_density", 20)

    try:
        generator = generator_cls(user_params=user_params, k_point_density=k_point_density)
    except TypeError:
        generator = generator_cls(user_params=user_params)

    input_set = generator.get_input_set(atoms)
    input_set.write_input(work_dir / test_name)

    return compare_files(test_name, work_dir, ref_dir)


def compare_single_files(ref_file: str | Path, test_file: str | Path) -> None:
    """Compare single files generated by tests with ones in reference directories."""
    with open(test_file) as tf:
        test_lines = tf.readlines()[5:]

    with zopen(f"{ref_file}.gz", mode="rt") as rf:
        ref_lines = rf.readlines()[5:]

    for test_line, ref_line in zip(test_lines, ref_lines):
        if "species_dir" in ref_line:
            continue
        assert test_line.strip() == ref_line.strip()


Si = Structure(
    lattice=((0.0, 2.715, 2.715), (2.715, 0.0, 2.715), (2.715, 2.715, 0.0)),
    species=("Si", "Si"),
    coords=((0, 0, 0), (0.25, 0.25, 0.25)),
)

O2 = Molecule(species=("O", "O"), coords=((0, 0, 0.622978), (0, 0, -0.622978)))
