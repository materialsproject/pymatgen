[build-system]
requires = [
    "Cython>=0.29.23",
    # Building against NPY2 will support both NPY1 and NPY2
    # https://numpy.org/devdocs/dev/depending_on_numpy.html#build-time-dependency
    "numpy>=2.0.1",
    "setuptools>=65.0.0",
]
build-backend = "setuptools.build_meta"


[project]
name = "pymatgen"
authors = [{ name = "Pymatgen Development Team", email = "ongsp@ucsd.edu" }]
maintainers = [
    { name = "Janosh Riebesell", email = "janosh.riebesell@gmail.com" },
    { name = "Matthew Horton", email = "m.k.horton@gmail.com" },
    { name = "Shyue Ping Ong", email = "ongsp@ucsd.edu" },
]
description = """
Python Materials Genomics is a robust materials analysis code that defines core object representations for structures
and molecules with support for many electronic structure codes. It is currently the core analysis code powering the
Materials Project (https://materialsproject.org)."""
readme = "README.md"
requires-python = ">=3.9"
keywords = [
    "ABINIT",
    "VASP",
    "analysis",
    "crystal",
    "diagrams",
    "electronic",
    "gaussian",
    "materials",
    "nwchem",
    "phase",
    "project",
    "qchem",
    "science",
    "structure",
]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.9",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "joblib>=1",
    "matplotlib>=3.8",
    "monty>=2024.7.29",
    "networkx>=2.2",
    # NumPy documentation suggests pinning the current major version as the C API is used
    # https://numpy.org/devdocs/dev/depending_on_numpy.html#runtime-dependency-version-ranges
    "palettable>=3.3.3",
    "pandas>=2",
    "plotly>=4.5.0",
    "pybtex>=0.24.0",
    "requests>=2.32",
    "ruamel.yaml>=0.17.0",
    "scipy>=1.13.0",
    "spglib>=2.5.0",
    "sympy>=1.2",
    "tabulate>=0.9",
    "tqdm>=4.60",
    "uncertainties>=3.1.4",
    'numpy>=1.25.0,<3.0',
]
version = "2024.8.8"

[project.urls]
Homepage = "https://pymatgen.org"
Documentation = "https://pymatgen.org"
Repository = "https://github.com/materialsproject/pymatgen"
Issues = "https://github.com/materialsproject/pymatgen/issues"
Pypi = "https://pypi.org/project/pymatgen"

[project.optional-dependencies]
ase = ["ase>=3.23.0"]
# don't depend on tblite above 3.11 since unsupported https://github.com/tblite/tblite/issues/175
tblite = ["tblite[ase]>=0.3.0; python_version<'3.12'"]
vis = ["vtk>=6.0.0"]
abinit = ["netcdf4>=1.7.1"]
mlp = ["chgnet>=0.3.8", "matgl>=1.1.1"]
electronic_structure = ["fdint>=2.0.2"]
ci = ["pytest-cov>=4", "pytest-split>=0.8", "pytest>=8"]
docs = ["sphinx", "sphinx_rtd_theme"]
optional = [
    "ase>=3.23.0",
    # TODO: uv cannot install BoltzTraP2
    # "BoltzTraP2>=24.7.2 ; platform_system != 'Windows'",
    "chemview>=0.6",
    "chgnet>=0.3.8",
    "f90nml>=1.1.2",
    "galore>=0.6.1",
    "h5py>=3.11.0",
    "jarvis-tools>=2020.7.14",
    "matgl>=1.1.1",
    # TODO: track https://github.com/matplotlib/matplotlib/issues/28551
    "matplotlib>=3.8,!=3.9.1",
    "netCDF4>=1.6.5",
    "phonopy>=2.23",
    "seekpath>=2.0.1",
    # don't depend on tblite above 3.11 since unsupported https://github.com/tblite/tblite/issues/175
    "tblite[ase]>=0.3.0; platform_system=='Linux' and python_version<'3.12'",
    # "hiphive>=0.6",
    # "openbabel>=3.1.1; platform_system=='Linux'",
]
numba = ["numba>=0.55"]

[project.scripts]
pmg = "pymatgen.cli.pmg:main"
feff_plot_cross_section = "pymatgen.cli.feff_plot_cross_section:main"
feff_plot_dos = "pymatgen.cli.feff_plot_dos:main"
get_environment = "pymatgen.cli.get_environment:main"

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
where = ["src"]
include = ["pymatgen", "pymatgen.*"]

[tool.setuptools.package-data]
"pymatgen.analysis" = ["*.csv", "*.json", "*.yaml"]
"pymatgen.analysis.chemenv" = [
    "coordination_environments/coordination_geometries_files/*.json",
    "coordination_environments/coordination_geometries_files/*.txt",
    "coordination_environments/strategy_files/ImprovedConfidenceCutoffDefaultParameters.json",
]
"pymatgen.analysis.structure_prediction" = ["*.yaml", "data/*.json"]
"pymatgen.analysis.diffraction" = ["*.json"]
"pymatgen.analysis.magnetism" = ["default_magmoms.yaml"]
"pymatgen.analysis.solar" = ["am1.5G.dat"]
"pymatgen.entries" = ["*.json.gz", "*.yaml", "data/*.json"]
"pymatgen.core" = ["*.json"]
"pymatgen" = ["py.typed"]
"pymatgen.io.vasp" = ["*.json", "*.json.bz2", "*.json.gz", "*.yaml"]
"pymatgen.io.feff" = ["*.yaml"]
"pymatgen.io.cp2k" = ["*.yaml"]
"pymatgen.io.lobster" = ["lobster_basis/*.yaml"]
"pymatgen.command_line" = ["*"]
"pymatgen.util" = ["*.json", "structures/*.json"]
"pymatgen.vis" = ["*.yaml"]
"pymatgen.io.lammps" = ["CoeffsDataType.yaml", "templates/*.template"]
"pymatgen.symmetry" = ["*.json", "*.sqlite", "*.yaml"]

[tool.pdm.dev-dependencies]
lint = ["mypy>=1.10.0", "pre-commit>=3.7.1", "ruff>=0.4.9"]
test = ["pytest-cov>=5.0.0", "pytest-split>=0.9.0", "pytest>=8.2.2"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.cibuildwheel.linux]
archs = ["auto64"]
skip = ["*musllinux*"]
before-all = "ln -s /usr/lib64/libgfortran.so.5 /usr/lib64/libgfortran.so.3"

[tool.cibuildwheel.macos]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"

[tool.ruff]
target-version = "py39"
line-length = 120
output-format = "concise"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Rule families
    "ANN",  # flake8-annotations (not ready, require types for ALL args)
    "ARG",  # Check for unused function arguments
    "BLE",  # General catch of Exception
    "C90",  # Check for functions with a high McCabe complexity
    "COM",  # flake8-commas (conflict with line wrapper)
    "CPY",  # Missing copyright notice at top of file (need preview mode)
    "EM",   # Format nice error messages
    "ERA",  # Check for commented-out code
    "FIX",  # Check for FIXME, TODO and other developer notes
    "FURB", # refurb (need preview mode, too many preview errors)
    "G",    # Validate logging format strings
    "INP",  # Ban PEP-420 implicit namespace packages
    "N",    # PEP8-naming (many var/arg names are intended)
    "PTH",  # Prefer pathlib over os.path
    "SLF",  # Access "private" class members
    "T20",  # Check for print/pprint
    "TD",   # TODO tags related

    # Single rules
    "B023",    # Function definition does not bind loop variable
    "B028",    # No explicit stacklevel keyword argument found
    "B904",    # Within an except clause, raise exceptions with ...
    "C408",    # unnecessary-collection-call
    "D105",    # Missing docstring in magic method
    "D205",    # One blank line required between summary line and description
    "D212",    # Multi-line docstring summary should start at the first line
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function
    "NPY201",  # TODO: enable after migration to NumPy 2.0
    "PD901",   # pandas-df-variable-name
    "PERF203", # Use of try-except in for/while loop
    "PERF401", # Replace "for" loops with list comprehension
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic-value-comparison TODO fix these
    "PLW2901", # Outer for loop variable overwritten by inner assignment target
    "PT013",   # Incorrect import of pytest
    "S101",    # Use of "assert"
    "S110",    # Log for try-except-pass
    "S112",    # Log for try-except-continue
    "S311",    # Use random module for cryptographic purposes
    "S314",    # Replace xml with defusedxml to avoid XML attacks
    "S603",    # Check source for use of "subprocess" call
    "S607",    # Start process with relative path
    "SIM105",  # Use contextlib.suppress() instead of try-except-pass
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # Check for return statements in try blocks
    "TRY301",  # Check for raise statements within try blocks
]
pydocstyle.convention = "google"
isort.required-imports = ["from __future__ import annotations"]
isort.split-on-trailing-comma = false
isort.known-first-party = ["pymatgen"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
# PLR2004: magic-value-comparison
# PLR6301: no-self-use
"tests/**" = ["ANN201", "D", "PLR0124", "PLR2004", "PLR6301"]
"src/pymatgen/analysis/*" = ["D"]
"src/pymatgen/io/*" = ["D"]
"dev_scripts/*" = ["D"]

[tool.pytest.ini_options]
addopts = "--durations=30 --quiet -r xXs --color=yes -p no:warnings --import-mode=importlib"

[tool.coverage.run]
parallel = true
omit = [
    "pymatgen/cli/feff_plot_cross_section.py",
    "pymatgen/cli/feff_plot_dos.py",
    "pymatgen/cli/pmg_config.py",
    "pymatgen/cli/pmg_plot.py",
    "pymatgen/cli/pmg_potcar.py",
    "pymatgen/cli/pmg_query.py",
    "pymatgen/dao.py",
]

[tool.coverage.report]
exclude_also = [
    "@deprecated",
    "@np.deprecate",
    "def __repr__",
    "except ImportError:",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "if self.debug:",
    "if settings.DEBUG",
    "if typing.TYPE_CHECKING:",
    "pragma: no cover",
    "raise NotImplementedError",
    "show_plot",
]

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
disable_error_code = ["annotation-unchecked", "override"]

[[tool.mypy.overrides]]
module = ["requests.*", "tabulate.*"]
ignore_missing_imports = true

[tool.codespell]
ignore-words-list = """
titel,alls,ans,nd,mater,nwo,te,hart,ontop,ist,ot,fo,nax,coo,
coul,ser,leary,thre,fase,rute,reson,titels,ges,scalr,strat,
struc,hda,nin,ons,pres,kno,loos,lamda,lew,atomate,nempty
"""
skip = "pymatgen/analysis/aflow_prototypes.json"
check-filenames = true

[tool.pyright]
typeCheckingMode = "off"
reportPossiblyUnboundVariable = true
reportUnboundVariable = true
reportMissingImports = false
reportMissingModuleSource = false
reportInvalidTypeForm = false
exclude = ["**/tests"]
