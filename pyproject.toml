[build-system]
requires = [
  "Cython>=0.29.23",
  # pin NumPy version used in the build
  "oldest-supported-numpy",
  "setuptools>=65.0.0",
]
build-backend = "setuptools.build_meta"

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.1"

[tool.cibuildwheel.linux]
archs = ["auto64"]
skip = ["*musllinux*"]
before-all = "ln -s /usr/lib64/libgfortran.so.5 /usr/lib64/libgfortran.so.3"

[tool.cibuildwheel.macos]
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
  "A",       # flake8-builtins
  # "AIR",   # The Airflow linter
  # "ANN",   # flake8-annotations (not ready, require types for ALL args)
  # "ARG",   # Check for unused function arguments
  "ASYNC",   # Problems related to Trio, AnyIO, or asyncio
  "B",       # flake8-bugbear
  # "BLE",   # General catch of Exception
  "C4",      # flake8-comprehensions
  # "C90",   # Check for functions with a high McCabe complexity
  # "CPY",   # Missing copyright notice at top of file (need preview mode)
  "D",       # pydocstyle
  # "DJ",    # Django (we don't use Django at all)
  "DTZ",     # flake8-datetimez
  "E",       # pycodestyle error
  "EXE",     # Executable permissions and shebangs of Python files
  "F",       # pyflakes
  "FA",      # flake8-future-annotations
  "FBT003",  # boolean-positional-value-in-call
  "FLY",     # Convert old "%-formatted" to f-strings
  # "FURB",  # refurb (need preview mode, too many preview errors)
  # "G",     # validate logging format strings
  "I",       # isort
  "ICN",     # How certain packages should be imported or aliased
  # "INP",   # Ban PEP-420 implicit namespace packages
  "INT",     # flake8-gettext
  "ISC",     # flake8-implicit-str-concat
  "LOG",     # The standard library logging module
  # "NPY",   # NumPy-specific rules (TODO: enable this)
  "PD",      # pandas-vet
  "PERF",    # performance anti-patterns
  "PGH",     # A collection of fast, cheap, regex based pre-commit hooks
  "PIE",     # flake8-pie
  "PL",      # pylint
  "PT",      # flake8-pytest-style
  "PYI",     # flakes8-pyi
  "Q",       # Encourage avoiding escaping quotes as per PEP-8
  "RET",     # flake8-return
  "RSE",     # flake8-raise
  "RUF",     # Ruff-specific rules
  # "S",     # flake8-bandit (TODO: enable this)
  "SIM",     # flake8-simplify
  "SLOT",    # Require __slots__ to be defined for subclasses of immutable types
  "T10",     # Check for the presence of debugger calls and imports
  "TCH",     # flake8-type-checking
  "TID",     # flake8-tidy-imports
  "TRIO",    # flake8-trio
  "TRY",     # tryceratops
  "UP",      # pyupgrade
  "W",       # pycodestyle warning
  "YTT",     # flake8-2020
]
ignore = [
  # Rule families
  "COM",     # flake8-commas (conflict with line wrapper)
  "EM",      # Format nice error messages
  "ERA",     # Check for commented-out code
  "FIX",     # Check for FIXME, TODO and other temporary notes
  "N",       # pep8-naming (many var/arg names are intended)
  "PTH",     # Prefer pathlib over os.path
  "SLF",     # Access "private" class members
  "T20",     # Check for print/pprint
  "TD",      # TODO tags related

  # Single rules
  "B023",    # Function definition does not bind loop variable
  "B028",    # No explicit stacklevel keyword argument found
  "B904",    # Within an except clause, raise exceptions with ...
  "C408",    # unnecessary-collection-call
  "D105",    # Missing docstring in magic method
  "D205",    # 1 blank line required between summary line and description
  "D212",    # Multi-line docstring summary should start at the first line
  "DTZ003",  # TODO: fix this (#3791)
  "PD901",   # pandas-df-variable-name
  "PERF203", # try-except-in-loop
  "PERF401", # manual-list-comprehension
  "PLR0911", # too many return statements
  "PLR0912", # too many branches
  "PLR0913", # too many arguments
  "PLR0915", # too many statements
  "PLR2004", # magic values in comparison
  "PLW2901", # Outer for loop variable overwritten by inner assignment target
  "PT013",   # pytest-incorrect-pytest-import
  "SIM105",  # Use contextlib.suppress() instead of try-except-pass
  "TRY003",  # Avoid specifying long messages outside the exception class
  "TRY301",  # Checks for raise statements within try blocks
  "TRY300",  # Checks for return statements in try blocks
]
pydocstyle.convention = "google"
isort.required-imports = ["from __future__ import annotations"]
isort.split-on-trailing-comma = false

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**" = ["ANN201", "D", "S101"]
"tasks.py" = ["D"]
"pymatgen/analysis/*" = ["D"]
"pymatgen/vis/*" = ["D"]
"pymatgen/io/*" = ["D"]
"dev_scripts/*" = ["D"]

[tool.pytest.ini_options]
addopts = "--durations=30 --quiet -r xXs --color=yes -p no:warnings --import-mode=importlib"

[tool.coverage.run]
parallel = true
omit = [
  "pymatgen/cli/feff_plot_cross_section.py",
  "pymatgen/cli/feff_plot_dos.py",
  "pymatgen/cli/pmg_config.py",
  "pymatgen/cli/pmg_plot.py",
  "pymatgen/cli/pmg_potcar.py",
  "pymatgen/cli/pmg_query.py",
  "pymatgen/dao.py",
]

[tool.coverage.report]
exclude_also = [
  "@deprecated",
  "@np.deprecate",
  "def __repr__",
  "except ImportError:",
  "if 0:",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
  "if self.debug:",
  "if settings.DEBUG",
  "if typing.TYPE_CHECKING:",
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "show_plot",
]

[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
explicit_package_bases = true
no_implicit_optional = false
disable_error_code = "annotation-unchecked"

[[tool.mypy.overrides]]
module = ["requests.*", "tabulate.*"]
ignore_missing_imports = true

[tool.codespell]
ignore-words-list = """
titel,alls,ans,nd,mater,nwo,te,hart,ontop,ist,ot,fo,nax,coo,
coul,ser,leary,thre,fase,rute,reson,titels,ges,scalr,strat,
struc,hda,nin,ons,pres,kno,loos,lamda,lew,atomate,nempty
"""
skip = "pymatgen/analysis/aflow_prototypes.json"
check-filenames = true

[tool.pyright]
typeCheckingMode = "off"
reportPossiblyUnboundVariable = true
reportUnboundVariable = true
reportMissingImports = false
reportMissingModuleSource = false
reportInvalidTypeForm = false
exclude = ["**/tests"]
